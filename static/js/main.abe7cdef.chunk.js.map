{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","picker","register","value","handle1","color","message","action","hex","pubnub","publish","channel","handle2","setState","background","parts","window","location","href","split","userId","Math","random","state","PubNubReact","publishKey","subscribeKey","uuid","init","assertThisInitialized","_this2","subscribe","channels","withPresence","getMessage","data","getStatus","st","unsubscribe","_this3","react_default","a","createElement","id","className","flex","style","qrcode_react_lib_default","width","height","lib","ref","_","triangle","onChange","onChangeComplete","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAgGeA,cAxFb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAqBRQ,OAAS,KAtBUP,EAwBnBQ,SAAW,SAAAC,GACTT,EAAKO,OAASE,GAzBGT,EAmDnBU,QAAU,SAAAC,GACR,IAAMC,EAAU,CACdC,OAAQ,cACRF,MAAOA,EAAMG,KAGfd,EAAKe,OAAOC,QAAQ,CAClBJ,QAASA,EACTK,QAASjB,EAAKiB,WA3DCjB,EA+DnBkB,QAAU,SAAAP,GACRX,EAAKmB,SAAS,WACZ,MAAO,CAAEC,WAAYT,EAAMG,QA7D7B,IAAMO,EAAQC,OAAOC,SAASC,KAAKC,MAAM,KAJxB,OAKjBzB,EAAKiB,QAAYI,GAASA,EAAM,IAAO,UAGvCrB,EAAK0B,OAAS,OAAUC,KAAKC,OAAO,KAEpC5B,EAAK6B,MAAQ,CACXT,WAAY,QAGdpB,EAAKe,OAAS,IAAIe,IAAY,CAC5BC,WAAY,6CACZC,aAAc,6CACdC,KAAMjC,EAAK0B,SAEb1B,EAAKe,OAAOmB,KAAZjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KAnBiBA,oFA4BE,IAAAoC,EAAAjC,KACnBA,KAAKY,OAAOsB,UAAU,CACpBC,SAAU,CAACnC,KAAKc,SAChBsB,cAAc,IAGhBpC,KAAKY,OAAOyB,WAAWrC,KAAKc,QAAS,SAACwB,GACpCL,EAAKjB,SAAS,WACZ,MAAO,CAAEC,WAAYqB,EAAK7B,QAAQD,WAItCR,KAAKY,OAAO2B,UAAU,SAACC,qDAMvBxC,KAAKY,OAAO6B,YAAY,CACtBN,SAAU,CAACnC,KAAKc,4CAsBX,IAAA4B,EAAA1C,KACP,OACE2C,EAAAC,EAAAC,cAAA,OAAKC,GAAG,MAAMC,UAAU,MAAMC,KAAM,GAClCL,EAAAC,EAAAC,cAAA,UAAQE,UAAU,aAAaE,MAAO,CAAEhC,WAAYjB,KAAK0B,MAAMT,aAC7D0B,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAQtC,MAAOa,OAAOC,SAASC,KAAM4B,MAAO,CAACE,MAAM,QAAQC,OAAO,WAClET,EAAAC,EAAAC,cAAA,WAAM7C,KAAK0B,MAAMT,YACjB0B,EAAAC,EAAAC,cAACQ,EAAA,aAAD,CACEC,IAAK,SAACC,GAAQb,EAAKtC,OAASmD,GAC5BC,SAAU,OACVhD,MAAOR,KAAK0B,MAAMT,WAClBwC,SAAUzD,KAAKO,QACfmD,iBAAkB1D,KAAKe,mBAjFjB4C,aCKEC,QACW,cAA7BzC,OAAOC,SAASyC,UAEe,UAA7B1C,OAAOC,SAASyC,UAEhB1C,OAAOC,SAASyC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.abe7cdef.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { GithubPicker } from 'react-color';\nimport PubNubReact from 'pubnub-react';\nimport './App.css';\nimport inspect from 'util-inspect';\nimport QRCode from 'qrcode.react';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // derive channel name from query string\n    const parts = window.location.href.split(\"?\");\n    this.channel =  (parts && parts[1]) || 'default';\n\n    // random userid\n    this.userId = \"user\" + (Math.random(1000));\n\n    this.state = {\n      background: '#000',\n    };\n\n    this.pubnub = new PubNubReact({\n      publishKey: 'pub-c-2884742e-59f2-4ced-b9c5-3536de2768f5',\n      subscribeKey: 'sub-c-963bd4b0-e461-11e8-bf53-0a39541862c0',\n      uuid: this.userId\n    });\n    this.pubnub.init(this);\n  }\n\n  picker = null;\n\n  register = value => {\n    this.picker = value;\n  }\n\n  componentWillMount() {\n    this.pubnub.subscribe({\n      channels: [this.channel],\n      withPresence: true\n    });\n\n    this.pubnub.getMessage(this.channel, (data) => {\n      this.setState(() => {\n        return { background: data.message.color };\n      });\n    });\n\n    this.pubnub.getStatus((st) => {\n      // user joined\n    });\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels: [this.channel]\n    });\n  }\n\n  handle1 = color => {\n    const message = {\n      action: 'colorChange',\n      color: color.hex\n    };\n\n    this.pubnub.publish({\n      message: message,\n      channel: this.channel\n    });\n  }\n\n  handle2 = color => {\n    this.setState(() => {\n      return { background: color.hex };\n    });\n  };\n\n  render() {\n    return (\n      <div id=\"App\" className=\"App\" flex={1}>\n        <header className=\"App-header\" style={{ background: this.state.background }}>\n          <QRCode value={window.location.href} style={{width:\"300px\",height:\"300px\"}} />\n          <div>{this.state.background}</div>\n          <GithubPicker\n            ref={(_) => { this.picker = _; }}\n            triangle={'hide'}\n            color={this.state.background}\n            onChange={this.handle1}\n            onChangeComplete={this.handle2}\n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}